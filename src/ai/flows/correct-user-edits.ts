// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Validates user edits to extracted text using generative AI.
 *
 * - correctUserEdits - A function that validates user edits to extracted text.
 * - CorrectUserEditsInput - The input type for the correctUserEdits function.
 * - CorrectUserEditsOutput - The return type for the correctUserEdits function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CorrectUserEditsInputSchema = z.object({
  originalText: z
    .string()
    .describe('The original text extracted by OCR.'),
  editedText: z.string().describe('The text after user edits.'),
});
export type CorrectUserEditsInput = z.infer<typeof CorrectUserEditsInputSchema>;

const CorrectUserEditsOutputSchema = z.object({
  isValid: z
    .boolean()
    .describe(
      'Whether the edited text is valid and does not introduce new errors.'
    ),
  validationReason: z
    .string()
    .describe(
      'The reason why the edited text is valid or invalid, providing feedback to the user.'
    )
    .optional(),
});
export type CorrectUserEditsOutput = z.infer<typeof CorrectUserEditsOutputSchema>;

export async function correctUserEdits(
  input: CorrectUserEditsInput
): Promise<CorrectUserEditsOutput> {
  return correctUserEditsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'correctUserEditsPrompt',
  input: {schema: CorrectUserEditsInputSchema},
  output: {schema: CorrectUserEditsOutputSchema},
  prompt: `You are an AI assistant specializing in validating edits made to OCR-extracted text.

You will receive the original text and the edited text. Your task is to determine if the edited text is a valid correction of the original text and does not introduce new errors or deviate significantly in meaning.

Original Text: {{{originalText}}}
Edited Text: {{{editedText}}}

Consider factors such as potential misread characters, context, and common sense. Provide a clear and concise reason for your validation, explaining why the edit is valid or invalid.

Respond in JSON format.
`,
});

const correctUserEditsFlow = ai.defineFlow(
  {
    name: 'correctUserEditsFlow',
    inputSchema: CorrectUserEditsInputSchema,
    outputSchema: CorrectUserEditsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
